[{"categories":["Python"],"content":"1 pipenv 安装 Pipenv是Python项目的依赖管理器。尽管pip可以安装Python包，但仍推荐使用Pipenv，因为它是一种更高级的工具，可简化依赖关系管理的常见使用情况。 使用pip安装： $ pip install --user pipenv --user代表用户安装模式，以防止破坏任何系统范围的包。 如果安装后, shell中没有pipenv，则需要将用户基础目录的二进制文件目录添加到PATH中。 Tip 在Linux和macOS上，您可以通过运行python -m site --user-base找到用户基础目录，然后把bin加到目录末尾。比如，上述命令典型地会打印出 ~/.local（~ 会扩展为您的家目录的局对路径），然后将 ~/.local/bin 添加到PATH中。 在 Windows 上，您通过运行py -m site --user-site找到用户基础目录，然后将site-packages替换为Scripts。比如，上述命令可能返回C:\\Users\\Username\\AppData\\Roaming\\Python310\\site-packages，然后您需要在PATH中包含C:\\Users\\Username\\AppData\\Roaming\\Python310\\Scripts。 ","date":"2022-03-05","objectID":"/pipenv_usage/:1:0","tags":["Python"],"title":"Pipenv 的基本使用","uri":"/pipenv_usage/"},{"categories":["Python"],"content":"2 创建虚拟环境 ","date":"2022-03-05","objectID":"/pipenv_usage/:2:0","tags":["Python"],"title":"Pipenv 的基本使用","uri":"/pipenv_usage/"},{"categories":["Python"],"content":"pipenv –python 可以指定版本创建，如果指定版本不存在: pienv --python 3.8 Warning: Python 3.8 was not found on your system... ","date":"2022-03-05","objectID":"/pipenv_usage/:2:1","tags":["Python"],"title":"Pipenv 的基本使用","uri":"/pipenv_usage/"},{"categories":["Python"],"content":"pipenv –three / –two 或者指定Python 3/2创建虚拟环境： pipenv --three / --two Note 以上i这两种创建指令会自动创建Pipfile，但不会有Pipfile.lock。 ","date":"2022-03-05","objectID":"/pipenv_usage/:2:2","tags":["Python"],"title":"Pipenv 的基本使用","uri":"/pipenv_usage/"},{"categories":["Python"],"content":"pipenv install pipenv install pipenv install --three / --two Note pipenv install在一个初始化工程中会自动创建出Pipfile和Pipfile.lock。 如果在一个已经是pipenv管理的工程中执行该命令，会在本地创建虚拟环境并自动安装Pipfile中的包。 等价指令： 1.pipenv install在新建工程中： pipenv install = pipenv --three + pipenv lock + pipenv sync 2.pipenv install在已有Pipfile的工程中： pipenv install = pipenv update = pipenv lock + pipenv sync ","date":"2022-03-05","objectID":"/pipenv_usage/:2:3","tags":["Python"],"title":"Pipenv 的基本使用","uri":"/pipenv_usage/"},{"categories":["Python"],"content":"3 Pipfile 和 Pipfile.lock 基于一个空项目创建的Pipfile文件内容如下： [[source]] url = \"https://pypi.org/simple\" verify_ssl = true name = \"pypi\" [packages] [dev-packages] [requires] python_version = \"3.10\" 基于pipenv install会多出一个Pipfile.lock: { \"_meta\": { \"hash\": { \"sha256\": \"fedbd2ab7afd84cf16f128af0619749267b62277b4cb6989ef16d4bef6e4eef2\" }, \"pipfile-spec\": 6, \"requires\": { \"python_version\": \"3.10\" }, \"sources\": [ { \"name\": \"pypi\", \"url\": \"https://pypi.org/simple\", \"verify_ssl\": true } ] }, \"default\": {}, \"develop\": {} } 安装package： pipenv install requests pipenv install pytest --dev Pipfile自动更新： [[source]] url = \"https://pypi.org/simple\" verify_ssl = true name = \"pypi\" [packages] requests = \"*\" [dev-packages] [requires] python_version = \"3.10\" 为限制篇幅，以下的Pipfile.lock是只安装requests的内容： { \"_meta\": { \"hash\": { \"sha256\": \"a416d48a2c30d4acf425cb96d7ac6672753db8e8f6c962a328848db5b9a290a1\" }, \"pipfile-spec\": 6, \"requires\": { \"python_version\": \"3.10\" }, \"sources\": [ { \"name\": \"pypi\", \"url\": \"https://pypi.org/simple\", \"verify_ssl\": true } ] }, \"default\": { \"certifi\": { \"hashes\": [ \"sha256:78884e7c1d4b00ce3cea67b44566851c4343c120abd683433ce934a68ea58872\", \"sha256:d62a0163eb4c2344ac042ab2bdf75399a71a2d8c7d47eac2e2ee91b9d6339569\" ], \"version\": \"==2021.10.8\" }, \"charset-normalizer\": { \"hashes\": [ \"sha256:2857e29ff0d34db842cd7ca3230549d1a697f96ee6d3fb071cfa6c7393832597\", \"sha256:6881edbebdb17b39b4eaaa821b438bf6eddffb4468cf344f09f89def34a8b1df\" ], \"markers\": \"python_version \u003e= '3'\", \"version\": \"==2.0.12\" }, \"idna\": { \"hashes\": [ \"sha256:84d9dd047ffa80596e0f246e2eab0b391788b0503584e8945f2368256d2735ff\", \"sha256:9d643ff0a55b762d5cdb124b8eaa99c66322e2157b69160bc32796e824360e6d\" ], \"markers\": \"python_version \u003e= '3'\", \"version\": \"==3.3\" }, \"requests\": { \"hashes\": [ \"sha256:68d7c56fd5a8999887728ef304a6d12edc7be74f1cfa47714fc8b414525c9a61\", \"sha256:f22fa1e554c9ddfd16e6e41ac79759e17be9e492b3587efa038054674760e72d\" ], \"index\": \"pypi\", \"version\": \"==2.27.1\" }, \"urllib3\": { \"hashes\": [ \"sha256:000ca7f471a233c2251c6c7023ee85305721bfdf18621ebff4fd17a8653427ed\", \"sha256:0e7c33d9a63e7ddfcb86780aac87befc2fbddf46c58dbb487e0855f7ceec283c\" ], \"markers\": \"python_version \u003e= '2.7' and python_version not in '3.0, 3.1, 3.2, 3.3, 3.4' and python_version \u003c '4'\", \"version\": \"==1.26.8\" } }, \"develop\": {} } 可以发现： Pipfile.lock会生成所有已下载包的sha256哈希值(包括中间依赖)。这使得pip在不安全网络情况下，保证你安装了你想要的包，或者从一个不信任的PyPI源下载依赖. 查看依赖： $ pipenv graph pytest==7.0.1 - atomicwrites [required: \u003e=1.0, installed: 1.4.0] - attrs [required: \u003e=19.2.0, installed: 21.4.0] - colorama [required: Any, installed: 0.4.4] - iniconfig [required: Any, installed: 1.1.1] - packaging [required: Any, installed: 21.3] - pyparsing [required: \u003e=2.0.2,!=3.0.5, installed: 3.0.7] - pluggy [required: \u003e=0.12,\u003c2.0, installed: 1.0.0] - py [required: \u003e=1.8.2, installed: 1.11.0] - tomli [required: \u003e=1.0.0, installed: 2.0.1] requests==2.27.1 - certifi [required: \u003e=2017.4.17, installed: 2021.10.8] - charset-normalizer [required: ~=2.0.0, installed: 2.0.12] - idna [required: \u003e=2.5,\u003c4, installed: 3.3] - urllib3 [required: \u003e=1.21.1,\u003c1.27, installed: 1.26.8] requests的依赖有certifi、charset-normalizer、idna、urllib3，这些信息同样被记录在Pipfile.lock。 ","date":"2022-03-05","objectID":"/pipenv_usage/:3:0","tags":["Python"],"title":"Pipenv 的基本使用","uri":"/pipenv_usage/"},{"categories":["Python"],"content":"4 版本管理 官方建议： Generally, keep both Pipfile and Pipfile.lock in version control. Do not keep Pipfile.lock in version control if multiple versions of Python are being targeted. 参照#598。有个观点时Pipfile.lock可以精准控制中间依赖的版本，我参与的项目是将Pipfile.lock一并纳入版本管理。 ","date":"2022-03-05","objectID":"/pipenv_usage/:4:0","tags":["Python"],"title":"Pipenv 的基本使用","uri":"/pipenv_usage/"},{"categories":["Python"],"content":"5 可修改依赖 (如 -e . ) 你可以让Pipenv以可修改模式安装某个路径，通常用于开发Python包时，安装当前工作目录。 $ pipenv install --dev -e . $ cat Pipfile [dev-packages] \"e1839a8\" = {path = \".\", editable = true} 所有次级依赖也会加到Pipfile.lock中。如果没有加-e选项次级依赖将不会加到Pipfile.lock中。 ","date":"2022-03-05","objectID":"/pipenv_usage/:5:0","tags":["Python"],"title":"Pipenv 的基本使用","uri":"/pipenv_usage/"},{"categories":["Python"],"content":"6 使用pipenv进行部署 可以用pipenv进行部署，在运行环境中安装Pipfile.lock中得依赖。 pipenv install --deploy pipenv sync 相关操作澄清： pipenv install --deploy是直接通过Pipfile.lock安装的，当Pipfile.lock的package版本过时或者python版本不对时，会失败。 pienv install --deploy和pipenv install的区别在于后者是以Pipfile安装的，如果package未指定版本时或者有新的package，会重新lock生成新的Pipfile.lock。 pipenv sync是直接根据Pipfile.lock中的依赖版本准确安装。 pipenv install --ignore-pipfile类似pipenv sync有点类似，只依赖Pipfile.lock。但是前者会re-lock，如Pipfile.lock中的package版本过时，会被更新。 ","date":"2022-03-05","objectID":"/pipenv_usage/:6:0","tags":["Python"],"title":"Pipenv 的基本使用","uri":"/pipenv_usage/"},{"categories":["Python"],"content":"7 Pipfile vs setup.py 详见：Pipfile vs setup.py。 可以通过以下命令将setup.py中的相关依赖安装到你的虚拟环境和Pipfile中。 pipenv install -e . ","date":"2022-03-05","objectID":"/pipenv_usage/:7:0","tags":["Python"],"title":"Pipenv 的基本使用","uri":"/pipenv_usage/"},{"categories":["Hugo"],"content":"1 Google Analytics Google分析（Google Analytics）是一个由Google所提供的网站流量统计服务。Google 分析（Analytics）现在是互联网上使用最广泛的网络分析服务。 ","date":"2022-02-28","objectID":"/google_analytics/:1:0","tags":["Hugo"],"title":"Hugo 配置Google Analytics和Search Console","uri":"/google_analytics/"},{"categories":["Hugo"],"content":"账号注册 在google Analytics上完成账号注册。 ","date":"2022-02-28","objectID":"/google_analytics/:1:1","tags":["Hugo"],"title":"Hugo 配置Google Analytics和Search Console","uri":"/google_analytics/"},{"categories":["Hugo"],"content":"创建网络媒体资源 在【管理】【创建网络媒体资源】下，点击【显示高级选项】。 开启【创建 Universal Analytics 媒体资源】，填写网站网址，选择【仅创建 Universal Analytics 媒体资源】， 完成网络媒体资源创建。 ","date":"2022-02-28","objectID":"/google_analytics/:1:2","tags":["Hugo"],"title":"Hugo 配置Google Analytics和Search Console","uri":"/google_analytics/"},{"categories":["Hugo"],"content":"获取跟踪信息 获取跟踪信息的导航为：【管理】【跟踪信息】【跟踪代码】。有效跟踪信息如下： 跟踪id 全局网站代码 (gtag.js) ","date":"2022-02-28","objectID":"/google_analytics/:1:3","tags":["Hugo"],"title":"Hugo 配置Google Analytics和Search Console","uri":"/google_analytics/"},{"categories":["Hugo"],"content":"2 hugo配置跟踪信息 需要配置的内容： config.toml中配置跟踪id 在每个网页的index.html中的head标签里添加全局网站代码（gtag.js） ","date":"2022-02-28","objectID":"/google_analytics/:2:0","tags":["Hugo"],"title":"Hugo 配置Google Analytics和Search Console","uri":"/google_analytics/"},{"categories":["Hugo"],"content":"配置跟踪id 在config.toml中找到google Analytics，并赋值为跟踪id。 googleAnalytics = \"UA-XXXXXXXXX-1\" 其中的UA-XXXXXXXXX-1需要替换成对应资源的跟踪id。 ","date":"2022-02-28","objectID":"/google_analytics/:2:1","tags":["Hugo"],"title":"Hugo 配置Google Analytics和Search Console","uri":"/google_analytics/"},{"categories":["Hugo"],"content":"配置gtag.js 在基础模板页中添加全局网站代码（gtag.js）。配置参考：Configure Google Analytics。 在项目根目录下新建layouts,在新增一个_internal/google_analytics_async.html，内容为全局网站代码（gtag.js）。 hugo规定内间模板的文件目录优先级大于主题目录，这样可以不用去更改主题下的配置模板。 这里已知有两种情况： 基础模板通过baseof.html配置。 基础模板通过head.html配置。 如果是通过baseof.html配置，需复制主题下的/themes/xxx/layouts/_default到根目录下的layouts下，不同的主题的_default下的文件可能略有不同。 +---layouts | +---_default | | | baseof.html | | | section.html | | | single.html | | | single.md | | | summary.html | \\---_internal | google_analytics_async.html 如果是head.html配置，head.html应该在/themes/xxx/layouts/partials/下，所以根目录下的layouts文件结果如下; +---layouts | +---partials | | | head.html | \\---_internal | google_analytics_async.html 无论是baseof.html还是head.html，都是在head标签内添加内容： {{- if not .Site.IsServer }} {{ template \"_internal/google_analytics_async.html\" . }} {{- end }} 验证gtag.js的内容是否成功插入，在项目根目录下执行hugo或者hugo --gc。会在根目录下会有public文件生成。查看文件夹下的index.html的head标签内是否成功插入gtag.js的内容。 ","date":"2022-02-28","objectID":"/google_analytics/:2:2","tags":["Hugo"],"title":"Hugo 配置Google Analytics和Search Console","uri":"/google_analytics/"},{"categories":["Hugo"],"content":"3 Search Console 在Search Console添加资源并提交验证。选择【网络前缀】，因为已经配置过Google Analytics,所以会自动通过谷歌分析完成所有权验证。 ","date":"2022-02-28","objectID":"/google_analytics/:3:0","tags":["Hugo"],"title":"Hugo 配置Google Analytics和Search Console","uri":"/google_analytics/"},{"categories":["Hugo"],"content":"4 提交站点地图 在Search Console中【站点地图】，添加新的站点地图，hugo会自动生成sitemap.xml，直接填写并提交即可。我提交后的状态是无法获取，暂未解决。但是可以先通过网址检查，并请求编入索引。然后通过site:example.com可以查询是否被成功索引。 ","date":"2022-02-28","objectID":"/google_analytics/:4:0","tags":["Hugo"],"title":"Hugo 配置Google Analytics和Search Console","uri":"/google_analytics/"},{"categories":["Git"],"content":"1 网络代理 git下载代码的时候可以通过https或ssh。有时候拉取GitHub上的代码因为网络原因出现失败，我们可以通过配置网络代理解决。 二者在提交代码时的认证方式不同： https：账号和密码认证。 ssh：证书认证。 ","date":"2022-02-24","objectID":"/git_proxy/:1:0","tags":["Git"],"title":"Git 网络代理","uri":"/git_proxy/"},{"categories":["Git"],"content":"HTTPS git config --global http.proxy \"http://127.0.0.1:3128\" git config --global https.proxy \"http://127.0.0.1:3128\" 以上配置生效会在用户目录下的.gitconfig文件中体现。 [user] name = huangjingwei email = example.com [http] proxy = http://127.0.0.1:3128 [https] proxy = http://127.0.0.1:3128 ","date":"2022-02-24","objectID":"/git_proxy/:1:1","tags":["Git"],"title":"Git 网络代理","uri":"/git_proxy/"},{"categories":["Git"],"content":"SSH 在用户目录下，新建.ssh/config。 Host github.com User git IdentityFile \"C:\\Users\\your-username\\.ssh\\id_rsa\" ProxyCommand connect.exe -H 127.0.0.1:3128 %h %p ","date":"2022-02-24","objectID":"/git_proxy/:1:2","tags":["Git"],"title":"Git 网络代理","uri":"/git_proxy/"},{"categories":["Docker"],"content":"1 Docker Docker是一个开放平台，可用于容器镜像的开发、交付和运行。 Docker名词一般是泛指。一般会代指Docker引擎(Docker Engine)或Docker注册中心(Docker registry)。 我们这边讨论的是Docker引擎。其主要有3部分组成： Docker守护进程(Docker daemon / dockerd)。 Docker Engine API。 Docker 客户端。 ","date":"2021-11-07","objectID":"/docker_proxy/:1:0","tags":["Docker"],"title":"Docker 安装和网络代理","uri":"/docker_proxy/"},{"categories":["Docker"],"content":"2 Docker的安装卸载 Docker的版本自17.03后分为CE(Community Edition)和EE(Enterprise Edition)，个人使用安装CE版本。 ","date":"2021-11-07","objectID":"/docker_proxy/:2:0","tags":["Docker"],"title":"Docker 安装和网络代理","uri":"/docker_proxy/"},{"categories":["Docker"],"content":"推荐安装方法 Linux的发行版一般会自带docker的软件包或者下载.deb文件手动安装， 但是本文推荐的安装方法是通过apt包管理工具安装，参照官网安装向导。 安装之前建议先卸载旧版本： $ sudo apt-get remove docker docker-engine docker.io containerd runc 添加使用HTTPS传输的软件包和CA证书： $ sudo apt-get update $ sudo apt-get install \\ ca-certificates \\ curl \\ gnupg \\ lsb-release 添加软件源需要的GPG密钥： $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - # 如果是国内源： $ curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add - 配置仓库： $ sudo add-apt-repository \\ \"deb [arch=$(dpkg --print-architecture)https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs)stable\" 或者直接在/etc/apt/sources.list.d/创建一个docker.list文件,添加上式中的引号中的内容， 并修改内容中修改架构和发行版名称。 执行安装： $ sudo apt-get update $ sudo apt-get install docker-ce docker-ce-cli containerd.io 建立docker用户组： $ sudo groupadd docker $ sudo usermod -aG docker $USER 如果一切顺利的话，就安装成功了。 ","date":"2021-11-07","objectID":"/docker_proxy/:2:1","tags":["Docker"],"title":"Docker 安装和网络代理","uri":"/docker_proxy/"},{"categories":["Docker"],"content":"卸载方法 卸载Docker Engine： $ sudo apt-get purge -y docker-engine docker docker-ce docker-ce-cli containerd.io $ sudo apt-get autoremove -y --purge docker-engine docker docker-ce docker-ce-cli containerd.io 以上的命令不会删除主机上的镜像、容器、卷和用户创建的配置文件等，如需清理： $ sudo rm -rf /var/lib/docker /var/lib/containerd /etc/docker $ sudo rm /etc/apparmor.d/docker $ sudo groupdel docker $ sudo rm -rf /var/run/docker.sock ","date":"2021-11-07","objectID":"/docker_proxy/:2:2","tags":["Docker"],"title":"Docker 安装和网络代理","uri":"/docker_proxy/"},{"categories":["Docker"],"content":"3 网络代理配置 在公司经常需要挂代理才可以正常访问互联网。如果是这种情况，需要为Docker配置代理。 在Docker的使用中，需要访问外网的场景一般有： dockerd代理配置 Container代理配置 docker build代理配置 下文主要参考：Docker的三种网络代理配置。 ","date":"2021-11-07","objectID":"/docker_proxy/:3:0","tags":["Docker"],"title":"Docker 安装和网络代理","uri":"/docker_proxy/"},{"categories":["Docker"],"content":"dockerd代理配置 当你执行docker login、docker push、docker pull时，实际上是在和docker-client交互， 这时候docker-client操作dockerd去访问外网的镜像仓库时，就会有相关的API发出，这时候需要给dockerd去配置代理。 docker受到systemd的管控，所以需要修改的是systemd的配置。 sudo mkdir -p /etc/systemd/system/docker.service.d sudo touch /etc/systemd/system/docker.service.d/proxy.conf 这里新创建的配置文件的命名只要符合*.conf的形式即可。添加内容如下： [Service] Environment=\"HTTP_PROXY=http://\u003cproxy-addr\u003e:\u003cproxy-port\u003e\" Environment=\"HTTPS_PROXY=http://\u003cproxy-addr\u003e:\u003cproxy-port\u003e\" Environment=\"NO_PROXY=localhost,127.0.0.1,docker-registry.somecorporation.com\" 其中的代理要换成可用的免密代理。 生效条件 需要重启dockerd才可生效。 重启指令： $ sudo systemctl daemon-reload $ sudo systemctl restart docker ","date":"2021-11-07","objectID":"/docker_proxy/:3:1","tags":["Docker"],"title":"Docker 安装和网络代理","uri":"/docker_proxy/"},{"categories":["Docker"],"content":"Container代理配置 1. 配置文件 当容器运行时，容器内的运用需要代理访问时，需要配置~/.docker/config.json，当然只生效在Docker的17.07及其以后版本。 {\"proxies\":{\"default\":{\"httpProxy\": \"http://\u003cproxy-addr\u003e:\u003cproxy-port\u003e\",\"httpsProxy\": \"http://\u003cproxy-addr\u003e:\u003cproxy-port\u003e\",\"noProxy\": \"localhost,127.0.0.1,docker-registry.somecorporation.com\"}}} 以上的配置可以一劳永逸。 2. 环境变量 当然，还有一种是在运行容器时通过环境变量的形式注入，命令是-e或者--env。 注意 注入的代理根据真实需要，如容器是基于ubuntu系统的应该配置http_proxy、https_proxy、no_proxy等。 生效条件 对已经启动的容器无效，对配置后启动的容器立即生效。 ","date":"2021-11-07","objectID":"/docker_proxy/:3:2","tags":["Docker"],"title":"Docker 安装和网络代理","uri":"/docker_proxy/"},{"categories":["Docker"],"content":"docker build代理配置 通过docker build构建镜像，是启动容器并逐层构建。但是上文中的配置文件对其无效。 Dockerfile也可以设置环境变量，有ENV和ARG，这两者的作用一致，但是通过ENV设置的环境变量会一并带到生成的镜像中。 ARG则不会，只在构建的阶段有效。 Dockerfile的ARG和docker build的--build-arg是一致的， 建议在构建时通过--build-arg \u003cvarname\u003e=\u003cvalue\u003e参数来指定或重设置这些变量的值。 所以，docker build配置代理： docker build . \\ --build-arg \"http_proxy=http://\u003cproxy-addr\u003e:\u003cproxy-port\u003e\" \\ --build-arg \"https_proxy=http://\u003cproxy-addr\u003e:\u003cproxy-port\u003e\" \\ --build-arg \"no_proxy=localhost,127.0.0.1,docker-registry.somecorporation.com\" \\ -t your/image:tag 同样，由于是通过环境变量来配置代理，配置生效的环境变量应该要符合实际镜像的要求。 注意 如果代理使用的是localhost:3128这类，必须加上--network host代理才能生效。 或者直接配置代理的外部IP。 生效条件 执行docker build构建镜像时立即生效。 ","date":"2021-11-07","objectID":"/docker_proxy/:3:3","tags":["Docker"],"title":"Docker 安装和网络代理","uri":"/docker_proxy/"},{"categories":null,"content":"这世界，来都来了。 学习做事。 刻意练习 自我迭代 学习做人。 辩证 接纳 适用人群：普通人。 ","date":"2021-11-06","objectID":"/about/:0:0","tags":null,"title":"向右看齐","uri":"/about/"}]