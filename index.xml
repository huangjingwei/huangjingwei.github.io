<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>wall-e's craft</title><link>https://huangjingwei.github.io/</link><description>关于 LoveIt 主题</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>hjw6613@163.com (立青人韦)</managingEditor><webMaster>hjw6613@163.com (立青人韦)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 06 Nov 2021 14:40:14 +0800</lastBuildDate><atom:link href="https://huangjingwei.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>闭包</title><link>https://huangjingwei.github.io/posts/closure-decorator/</link><pubDate>Sun, 21 May 2023 12:13:53 +0000</pubDate><author>作者</author><guid>https://huangjingwei.github.io/posts/closure-decorator/</guid><description>闭包 定义 闭包，是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。 有另一种说法认为闭包是由</description></item><item><title>命令备忘录</title><link>https://huangjingwei.github.io/posts/command/</link><pubDate>Sun, 21 May 2023 09:26:55 +0000</pubDate><author>作者</author><guid>https://huangjingwei.github.io/posts/command/</guid><description>ssh公钥免密登录 1 ssh-copy-id -i ~/.ssh/id_rsa.pub 用户名@ip地址 以上命令会将本地的ssh公钥拷贝到目标机器的.ssh目录下，文件名为authorized_keys</description></item><item><title>镜像和容器的Entrypoint和CMD</title><link>https://huangjingwei.github.io/posts/cmd/</link><pubDate>Sat, 08 Oct 2022 14:26:12 +0000</pubDate><author>作者</author><guid>https://huangjingwei.github.io/posts/cmd/</guid><description><![CDATA[Entrypoint和CMD No ENTRYPOINT ENTRYPOINT exec_entry p1_entry ENTRYPOINT [&ldquo;exec_entry&rdquo;, &ldquo;p1_entry&rdquo;] No CMD error, not allowed /bin/sh -c exec_entry p1_entry exec_entry p1_entry CMD [&ldquo;exec_cmd&rdquo;, &ldquo;p1_cmd&rdquo;] exec_cmd p1_cmd /bin/sh -c exec_entry p1_entry exec_entry p1_entry exec_cmd p1_cmd CMD [&ldquo;p1_cmd&rdquo;, &ldquo;p2_cmd&rdquo;] p1_cmd p2_cmd /bin/sh -c exec_entry p1_entry exec_entry p1_entry p1_cmd p2_cmd CMD exec_cmd p1_cmd /bin/sh -c exec_cmd p1_cmd /bin/sh -c exec_entry p1_entry]]></description></item><item><title>Registry 认证和授权</title><link>https://huangjingwei.github.io/posts/auth/</link><pubDate>Sun, 04 Sep 2022 14:52:37 +0000</pubDate><author>作者</author><guid>https://huangjingwei.github.io/posts/auth/</guid><description>认证方案 Registry的授权方案是基于OAuth2.0的密码模式。 上面代表的是以Docker举例的Registry的认证鉴权方案： 1.Docker Dae</description></item><item><title>Algolia 站内搜索</title><link>https://huangjingwei.github.io/posts/algolia/</link><pubDate>Wed, 24 Aug 2022 15:21:30 +0000</pubDate><author>作者</author><guid>https://huangjingwei.github.io/posts/algolia/</guid><description>注册 前往官方网站使用GitHub或Google帐号登录。登录完成后根据提示信息填写一些基本的信息即可，注册完成后前往Overview，我们可</description></item><item><title>Kubernetes 安装</title><link>https://huangjingwei.github.io/posts/install/</link><pubDate>Sun, 14 Aug 2022 09:02:07 +0000</pubDate><author>作者</author><guid>https://huangjingwei.github.io/posts/install/</guid><description>安装kubeadm三件套 三件套： kubeadm：用来初始化集群的指令。 kubelet：运行在集群节点上的组件。 kubectl：和集群交互的C</description></item><item><title>花生壳内网穿透</title><link>https://huangjingwei.github.io/posts/phddns/</link><pubDate>Sun, 05 Jun 2022 11:47:59 +0000</pubDate><author>作者</author><guid>https://huangjingwei.github.io/posts/phddns/</guid><description>&lt;p>&lt;a class="lightgallery" href="/Ubuntu/phddns/limit.png" title="/Ubuntu/phddns/limit.png" data-thumbnail="/Ubuntu/phddns/limit.png">
&lt;/a>
使用花生壳，实现内网穿透，以便在公网的机器可以正确路由到内网的主机上的服务。&lt;/p></description></item><item><title>使用hugo镜像</title><link>https://huangjingwei.github.io/posts/image/</link><pubDate>Sun, 05 Jun 2022 11:13:59 +0000</pubDate><author>作者</author><guid>https://huangjingwei.github.io/posts/image/</guid><description><![CDATA[<a class="lightgallery" href="/Hugo/image/klakegg-hugo.png" title="/Hugo/image/klakegg-hugo.png" data-thumbnail="/Hugo/image/klakegg-hugo.png">
        
    </a>
<p><code>klakegg/hugo</code>是官方推荐的，包含hugo开源静态网站生成器的镜像。</p>]]></description></item><item><title>Ubuntu 卸载和安装</title><link>https://huangjingwei.github.io/posts/instatll/</link><pubDate>Mon, 23 May 2022 21:36:17 +0800</pubDate><author>作者</author><guid>https://huangjingwei.github.io/posts/instatll/</guid><description>双系统卸载Ubuntu 在安装双系统的惯用手法是，在Windows下的磁盘管理中压缩出可用空间用于安装Ubuntu。 所以删除系统就是在磁盘管理</description></item><item><title>Pipenv 的基本使用</title><link>https://huangjingwei.github.io/posts/pipenv-usage/</link><pubDate>Sat, 05 Mar 2022 19:38:02 +0800</pubDate><author>作者</author><guid>https://huangjingwei.github.io/posts/pipenv-usage/</guid><description>&lt;a class="lightgallery" href="/python/pipenv_usage/pipenv-half.jpg" title="/python/pipenv_usage/pipenv-half.jpg" data-thumbnail="/python/pipenv_usage/pipenv-half.jpg">
&lt;/a>
&lt;p>Pipenv是Python项目的依赖管理器。尽管pip可以安装Python包，但仍推荐使用Pipenv，因为它是一种更高级的工具，可简化依赖关系管理的常见使用情况。&lt;/p></description></item></channel></rss>